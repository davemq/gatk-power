#+title: "Porting" LoglessPairHMM to Power VSX
#+author: Dave Marquardt
#+email: davemarq@us.ibm.com
#+property: header-args :exports code
#+latex_header: \usepackage{minted}
#+latex_header: \usepackage{microtype}

#+begin_comment
Tangling likes to output the Org text with indentation that doesn't
match the indentation rules for the mode.

The text that is interleaved with code is indented to match the code.

But even with this, org-babel-tangle will, by default, remove the
indentation.

I had to write a new function that merely returns the "code" and set
org-babel-process-comment-text that that new function, rather than the
default value, which is a function that removes indentation.
#+end_comment

* Introduction

This shows how to "port" the GATK logless pair HMM Java implementation
to C or C++, so we can have gcc compile into code that uses VSX vector
instructions on Power 9 and above.[fn:1] The goal is to provide a
vector pair HMM implementation on Power that has significantly better
performance than the non-vector implementation, and is close to the
performance of the AVX implementations.

* Build

GATK and Intel's GKL both use Gradle to build. The GATK build only
deals in Java, no native code. The GKL build deals in both the Java
code and the native C++ code. The Gradle build runs CMake to build the
native C++ code. This project will also use the combination of Gradle
and CMake to build.

* Existing Java class LoglessPairHMM

The main code in LoglessPairHMM is in method
src_java{subComputeReadLikelihoodGivenHaplotypeLog10}. There is an
initialization loop here that likely gets called once. Then a main
loop that has a loop inside it. Then a final loop to create a sum.

We will leave the first loop, for initialization, alone. The second
and third loops are discussed below.


** Second loop

The second loop is the real guts of
src_java{subComputeReadLikelihoodGivenHaplotypeLog10}:

#+begin_src java :options 
        for (int i = 1; i < paddedReadLength; i++) {
            // +1 here is because hapStartIndex is 0-based, but our matrices are 1
	    // based
            for (int j = hapStartIndex+1; j < paddedHaplotypeLength; j++) {
                //Inlined the code from updateCell - helps JIT to detect
		//hotspots and produce good native code
                matchMatrix[i][j] = prior[i][j] * ( matchMatrix[i - 1][j - 1] *
						    transition[i][matchToMatch] +
						    insertionMatrix[i - 1][j - 1] *
						    transition[i][indelToMatch] +
						    deletionMatrix[i - 1][j - 1] *
						    transition[i][indelToMatch] );
                insertionMatrix[i][j] = matchMatrix[i - 1][j] *
		    transition[i][matchToInsertion] + insertionMatrix[i - 1][j] *
		    transition[i][insertionToInsertion];
                deletionMatrix[i][j] = matchMatrix[i][j - 1] *
		    transition[i][matchToDeletion] + deletionMatrix[i][j - 1] *
		    transition[i][deletionToDeletion];
            }
        }
#+end_src

These are integer variables that will need to be passed to a native
routine:
- src_c++{hapStartIndex}
- src_c++{paddedHaplotypeLength}
- src_c++{paddedReadLength}

There are also these matrices that are declared as src_c++{double
[][]}:
- src_c++{deletionMatrix}
- src_c++{insertionMatrix}
- src_c++{matchMatrix}
- src_c++{prior}
- src_c++{transition}

These variables all need to be passed to the native routine. The
integer variables don't get modified, so are simple to deal with
directly, other than casting from src_c++{jint} to src_c++{int}.

For the matrices, we have more work to do to make these available to
the native code.

** Third loop

The third loop sums the probabilities from src_java{matchMatrix} and
src_java{insertionMatrix}.

#+begin_src java
        // final log probability is the log10 sum of the last element in the
        // Match and Insertion state arrays
        // this way we ignore all paths that ended in deletions! (huge)
        // but we have to sum all the paths ending in the M and I matrices,
        // because they're no longer extended.
        final int endI = paddedReadLength - 1;
        double finalSumProbabilities = 0.0;
        for (int j = 1; j < paddedHaplotypeLength; j++) {
            finalSumProbabilities += matchMatrix[endI][j] + insertionMatrix[endI][j];
        }
#+end_src

Since we already will have access to src_java{matchMatric} and
src_java{insertionMatrix} in the native code, we'll go ahead and
compute src_java{finalSumProbabilities} and return it. This will make
our native routine return src_c{jdouble}.

* New Java code

** Header matter

#+begin_src java :comments org :tangle src/main/java/com/ibm/power/pairhmm/PowerPairHMM.java  :exports none
// NOTE: THIS FILE IS GENERATED from an Org mode document. Edit the original
// document and re-tangle this file.
#+end_src

#+begin_src java :comments org :tangle src/main/java/com/ibm/power/pairhmm/PowerPairHMM.java
package com.ibm.power.pairhmm;

import java.io.File;
import java.net.URL;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.FileUtils;
#+end_src

** New Java class PowerPairHMM

We will create a new Java class src_java{PowerPairHMM} to provide the
native C code that does matrix arithmetic. This code will be in a new
package.

*** Class

#+begin_src java :comments org :tangle src/main/java/com/ibm/power/pairhmm/PowerPairHMM.java 
/// Provides native PairHMM code accelerated for Power vector
/// instructions, via compiler optimizations.
public class PowerPairHMM {
#+end_src

*** Implement load

    The class will load the native library through a src_java{static} block.[fn:3]

#+begin_src java :comments org :tangle src/main/java/com/ibm/power/pairhmm/PowerPairHMM.java 
    static {
	String systemLibraryName = System.mapLibraryName("vsx_pairhmm");
	String resourcePath = "native/" + systemLibraryName;
	URL inputUrl = PowerPairHMM.class.getResource(resourcePath);
	try {
	    File temp = File.createTempFile(FilenameUtils.getBaseName(resourcePath),
					    "." + FilenameUtils.getExtension(resourcePath));
	    FileUtils.copyURLToFile(inputUrl, temp);
	    temp.deleteOnExit();
	    System.load(temp.getAbsolutePath());
	} catch (Exception|Error e) {
	    System.out.println(String.format("Unable to load %s from %s (%s), 
					     systemLibraryName, resourcePath,
					     e.getMessage()));
	    throw e;
	}
    }
#+end_src

*** Provide native subComputeNative

#+begin_src java :comments org :tangle src/main/java/com/ibm/power/pairhmm/PowerPairHMM.java 
    public native double
	subComputeNative(int paddedReadLength,
			 int hapStartIndex,
			 int paddedHaplotypeLength,
			 double [][] matchMatrix,
			 double [][] prior,
			 double [][] transition,
			 double [][] insertion,
			 double [][] deletion);
}
#+end_src


** New Java class VSXLoglessPairHMM

This code will be in GATK, in package
org.broadinstitute.hellbender.utils.pairhmm.

This code creates a new class src_java{VSXLoglessPairHMM} based on
src_java{LoglessPairHMM}. It overrides
src_java{subComputeReadLikelihoodGivenHaplotypeLog10} in order to call
the native code from class src_java{PowerPairHMM}.

#+begin_src java :comments org :tangle VSXLoglessPairHMM.java 
package org.broadinstitute.hellbender.utils.pairhmm;
#+end_src

Import src_java{PowerPairHMM}.

#+begin_src java :comments org :tangle VSXLoglessPairHMM.java
import com.ibm.power.pairhmm.PowerPairHMM;

public final class VSXLoglessPairHMM extends LoglessPairHMM {
#+end_src


*** Implement subComputeNative

    src_java{class VSXLoglessPairHMM} will implement
    src_java{subComputeReadLikelihoodGivenHaplotypeLog10} in order to call
    the native code.

#+attr_latex: :options \footnotesize
#+begin_src java :comments org :tangle VSXLoglessPairHMM.java 
    ///
    /// {@inheritDoc}
    ///
    public double subComputeReadLikelihoodGivenHaplotypeLog10( final byte[] haplotypeBases,
                                                               final byte[] readBases,
                                                               final byte[] readQuals,
                                                               final byte[] insertionGOP,
                                                               final byte[] deletionGOP,
                                                               final byte[] overallGCP,
                                                               final int hapStartIndex,
                                                               final boolean recacheReadValues,
                                                               final int nextHapStartIndex) {
#+end_src

        Set src_java{hmm} to a new instance of src_java{PowerPairHMM}.

#+begin_src java :comments org :tangle VSXLoglessPairHMM.java
	PowerPairHMM hmm = new PowerPairHMM();
#+end_src

        We leave initialization code in place.

#+attr_latex: :options \footnotesize
#+begin_src java :comments org :tangle VSXLoglessPairHMM.java 
        if (previousHaplotypeBases == null || previousHaplotypeBases.length != haplotypeBases.length) {
            final double initialValue = INITIAL_CONDITION / haplotypeBases.length;
            // set the initial value (free deletions in the beginning) for the first row in the
	    // deletion matrix
            for( int j = 0; j < paddedHaplotypeLength; j++ ) {
                deletionMatrix[0][j] = initialValue;
            }
        }

        if ( ! constantsAreInitialized || recacheReadValues ) {
            initializeProbabilities(transition, insertionGOP, deletionGOP, overallGCP);

            // note that we initialized the constants
            constantsAreInitialized = true;
        }

        initializePriors(haplotypeBases, readBases, readQuals, hapStartIndex);
#+end_src

        Now we call our native method
        src_java{subComputeNative}:

#+attr_latex: :options \small
#+begin_src java :comments org :tangle VSXLoglessPairHMM.java 
	double finalSumProbabilities;
	finalSumProbabilities =
	    hmm.subComputeNative(paddedReadLength,
				 hapStartIndex,
				 paddedHaplotypeLength,
				 matchMatrix,
				 prior,
				 transition,
				 insertionMatrix,
				 deletionMatrix);
#+end_src

        The native method returns src_c{NAN} (Not A Number) if it
        encounters errors. Check for that here and return if
        detected.[fn:2]

#+begin_src java :comments org :tangle VSXLoglessPairHMM.java 
	if (Double.isNaN(finalSumProbabilities)) {
	    return finalSumProbabilities;
	}
#+end_src

        Finally, return log10 of src_java{finalSumProbabilities} minus
        src_java{INITIAL_CONDITIION_LOG10}.

#+begin_src java :comments org :tangle VSXLoglessPairHMM.java 
        return Math.log10(finalSumProbabilities) - INITIAL_CONDITION_LOG10;
    }
}
#+end_src


** Native code

C code to implement the native functions.

*** Header files

We need to include
- math.h for NAN
- stdlib.h to use src_c{calloc} and src_c{posix_memalign}
- string.h for src_c{memset}
- PowerPairHMM.h for JNI and function declarations

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c  :exports none
/*
 ,* NOTE: THIS FILE IS GENERATED from an Org mode document. Edit the original
 ,* document and re-tangle this file.
 ,*/
#+end_src

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
#ifdef __cplusplus
extern "C" {
#endif

#include <math.h>
#include <stdlib.h>
#include <string.h>
#include "PowerPairHMM.h"
#+end_src

*** Typedefs

Tracking pointer types is helped out by adding some typedefs.

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
typedef jdouble *jdoubleP;
typedef jdoubleArray *jdoubleArrayP;
#+end_src

*** getDouble2dArray: Get access to double [][] arrays

This C function
- gets the size of the outer array using src_c{GetObjectLength}
- allocates an array of src_c{jdoubleP}
- allocates an array of src_c{jdoubleArray} to use later to release
  memory
- for each element of the outer array
  - call src_c{GetDoubleArrayElements} to get access to the Java
    src_java{double [][]}
  - save the array src_c{jdoubleArray} and the native src_c{jdoubleP}

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
static
jdoubleP *
getDouble2dArray(JNIEnv *env, jobjectArray matrix, jdoubleArrayP *arrays)
{
#+end_src

	Get the length of the outer array.

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
	jsize jlen = (*env)->GetArrayLength(env, matrix);
	size_t len = (size_t) jlen;
#+end_src

	Allocate src_c{jdoubleP} and src_c{jdoubleArray} arrays. We
	use src_c{posix_memalign} for the src_c{jdoubleP} array to
	help the compiled code use POWER vector instructions.

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
	jdoubleP *ptrs;

	int rc = posix_memalign((void **)&ptrs, 16, len * sizeof(jdoubleP));
	if (rc != 0) {
		return NULL;
	}
	(void) memset(ptrs, 0, len * sizeof(jdoubleP));

	,*arrays = calloc(len, sizeof(jdoubleArray));
	if (*arrays == NULL) {
		goto cleanptrs;
	}
#+end_src

	For each index src_c{i} from 0 to src_c{len - 1}
	- get outer array element, a src_c{jdoubleArray}. Save in src_c{*arrays[i]}
	- call GetDoubleArrayElements on src_c{*arrays[i]}. Save in
          src_c{ptrs[i]}

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
	for (jsize i = 0; i < jlen; i++) {
		,*arrays[i] = (*env)->GetObjectArrayElement(env, matrix, i);
		if (*arrays[i] == NULL) {
			goto cleanarrays;
		}
		ptrs[i] = (*env)->GetDoubleArrayElements(env, *arrays[i], NULL);
		if (ptrs[i] == NULL) {
			goto cleanarrays;
		}
	}
#+end_src

	At this point, we're done, so return src_c{ptrs}.

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
	return ptrs;
#+end_src

	Now we have the cleanup labels. Recall that the code jumps to
	either src_c{cleanptrs:} or src_c{cleanarrays:} in the case of
	errors. We handle these in reverse order, with
	src_c{cleanarrays:} first and then falling through to
	src_c{cleanptrs:}.

	For src_c{cleanarrays:} we need to release memory back to
	Java. Rely on the fact that we zeroed out src_c{ptrs} and
	src_c{*arrays} when allocating memory to break out of the loop
	early. Also free src_c{*arrays} here.

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
cleanarrays:
	for (int i = 0; i < len; i++) {
		if (ptrs[i] == NULL) {
			break;
		}

		/* ReleaseDoubleArrayElements() with mode=0 frees ptrs[i] */
		(*env)->ReleaseDoubleArrayElements(env, *arrays[i], ptrs[i], 0);
	}

	free(*arrays);
#+end_src

	src_c{cleanptrs:} only handles freeing src_c{*ptrs}, then
	returns NULL.

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
cleanptrs:
	free(ptrs);
	return NULL;
}
#+end_src

*** releaseDouble2dArray: release memory and flush to Java

src_c{releaseDouble2dArray} is similar to the clean up code in
src_c{getDouble2dArray}, but leaves out checks for NULL pointers as
there shouldn't be any.

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
static
void
releaseDouble2dArray(JNIEnv *env, jobjectArray matrix, jdoubleP *native, jdoubleArrayP *jarray)
{
#+end_src

	First, get the length of the array.

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
	jsize len = (*env)->GetArrayLength(env, matrix);
#+end_src

	For each index from 0 to src_c{len - 1}
	- call ReleaseDoubleArrayElements with src_c{native[i]} and
          src_c{*jarray[i]}

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
	for (int i = 0; i < len; i++) {
		/* ReleaseDoubleArrayElements with mode=0 frees memory */
		(*env)->ReleaseDoubleArrayElements(env, *jarray[i], native[i], 0);
	}
#+end_src

	Now, free src_c{jarray} and src_c{native}.

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
	free(*jarray);
	,*jarray = NULL;
	free(native);
}
#+end_src

*** Native code and JNI


The native code will use JNI to get access to Java class data. Since
we have 5 matrices declared as src_java{double [][]}, we'll write a C
function src_c{get2dDoubleArray} to set up access to these matrices.

A src_java{double [][]} is implemented as an array of arrays of
doubles. This is passed as a src_c{jObjectArray} to
C/C++. src_c{GetObjectArrayLength} is called to get the length of the
outer array. Then a array of double pointers (src_c{double *}) is
dynamically allocated using src_c{malloc} or src_c++{new}.

The native code for the main loop of
src_java{subComputeReadLikelihoodGivenHaplotypeLog10} will start with

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
JNIEXPORT jdouble JNICALL
Java_com_ibm_power_pairhmm_PowerPairHMM_subComputeNative
(JNIEnv *env, jobject this, jint paddedReadLength, jint hapStartIndex,
 jint paddedHaplotypeLength, jobjectArray matchMatrix, jobjectArray priorMatrix,
 jobjectArray transitionMatrix, jobjectArray insertionMatrix,
 jobjectArray deletionMatrix)
{
#+end_src

	Recall in [[Second loop]] that src_java{hapStartIndex},
	src_java{paddedHaplotypeLength}, and src_java{paddedReadLength} are
	all integer types. We create 3 C variables that use these
	values cast to src_c{int}.

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
	int start = (int) hapStartIndex;
	int hapLength = (int) paddedHaplotypeLength;
	int readLength = (int) paddedReadLength;
#+end_src

	We declare and initialize src_c{finalSumProbabilities} to
	src_c{NAN} here so if there's a problem encountered before
	computing src_c{finalSumProbabilities} we return src_c{NAN}.

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
	jdouble finalSumProbabilities = NAN;
#+end_src
	
	The rest of the variables are src_c{jobjectArray}s that are Java
	src_java{double [][]}. We will represent these as src_c{double **}
	variables.

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
	jdouble **match, **prior, **transition, **insertion, **deletion;
#+end_src

	Underneath these we have src_c{jdoubleArray}s that we will gain access
	to via the JNI function src_c{GetDoubleArrayElements}. In order to
	release our access when we're done, we'll need to pass the original
	src_c{jdoubleArray} and the native type pointer to
	src_c{ReleaseDoubleArrayElements()}. So we'll need to track both of
	these together. We will track the src_c{jdoubleArray}s in separate
	arrays, dynamically allocated.

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
	jdoubleArray *jMatch, *jPrior, *jTransition, *jInsertion, *jDeletion;
#+end_src

	For each of the matrices, we call a new routine
	src_c{getDouble2dArray} to retrieve the array elements and track them.

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
	if ((match = getDouble2dArray(env, matchMatrix, &jMatch)) == NULL) {
		return NAN;
	}
	if ((prior = getDouble2dArray(env, priorMatrix, &jPrior)) == NULL) {
		goto free_match;
	}
	if ((transition = getDouble2dArray(env, transitionMatrix, &jTransition)) == NULL) {
		goto free_prior;
	}
	if ((insertion = getDouble2dArray(env, insertionMatrix, &jInsertion)) == NULL) {
		goto free_transition;
	}
	if ((deletion = getDouble2dArray(env, deletionMatrix, &jDeletion)) == NULL) {
		goto free_insertion;
	}
#+end_src

	If these calls succeed, we can now get on to the matrix
	manipulations.

	We add some constants used in the loop from Java class
	PairHMMModel here. We could get these via JNI, but they
	wouldn't be constants, possibly making the loop below more
	difficult to optimize.

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
	/* From class PairHMMModel */
	const int matchToMatch       = 0,
		indelToMatch         = 1,
		matchToInsertion     = 2,
		insertionToInsertion = 3,
		matchToDeletion      = 4,
		deletionToDeletion   = 5;
#+end_src

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
	for (int i = 1; i < readLength; i++) {
		/* +1 here is because hapStartIndex is 0-based, but our matrices are 1 */
		/* based */
		for (int j = start+1; j < hapLength; j++) {
			match[i][j] = prior[i][j] *
				( match[i - 1][j - 1] *
				  transition[i][matchToMatch] +
				  insertion[i - 1][j - 1] *
				  transition[i][indelToMatch] +
				  deletion[i - 1][j - 1] *
				  transition[i][indelToMatch] );
			insertion[i][j] = match[i - 1][j] *
				transition[i][matchToInsertion] +
				insertion[i - 1][j] *
				transition[i][insertionToInsertion];
			deletion[i][j] = match[i][j - 1] *
				transition[i][matchToDeletion] +
				deletion[i][j - 1] *
				transition[i][deletionToDeletion];
		}
	}
#+end_src

	Next we compute the final log probability.

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
	/*
	 ,* final log probability is the log10 sum of the last element in the
	 ,* Match and Insertion state arrays
	 ,* this way we ignore all paths that ended in deletions! (huge)
	 ,* but we have to sum all the paths ending in the M and I matrices,
	 ,* because they're no longer extended.
	 ,*/
        int endI = readLength - 1;
        finalSumProbabilities = 0.0;
        for (int j = 1; j < hapLength; j++) {
            finalSumProbabilities += match[endI][j] + insertion[endI][j];
        }
#+end_src

	We next release all the memory for the matrices.

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
	releaseDouble2dArray(env, deletionMatrix, deletion, &jDeletion);
free_insertion:
	releaseDouble2dArray(env, insertionMatrix, insertion, &jInsertion);
free_transition:
	releaseDouble2dArray(env, transitionMatrix, transition, &jTransition);
free_prior:
	releaseDouble2dArray(env, priorMatrix, prior, &jPrior);
free_match:
	releaseDouble2dArray(env, matchMatrix, match, &jMatch);
#+end_src

	Finally, we return src_c{finalSumProbabilities}.

#+begin_src c :comments org :tangle src/main/native/pairhmm/PowerPairHmm.c 
	return finalSumProbabilities;
}

#ifdef __cplusplus
}
#endif
#+end_src


* Updates to existing GATK Java code

Java class
src_java{org.broadinstitute.hellbender.utils.pairhmm.PairHMM} has
src_java{enum Implementation} with each element being an available
implementation of PairHMM. We need to update this to include a new
element src_java{VSX_LOGLESS_CACHING}, and to try to use this element
in the element src_java{FASTEST_AVAILABLE}. We'll also remove the
elements src_java{AVX_LOGLESS_CACHING_OMP} and
src_java{AVX_LOGLESS_CACHING}, as these are not available on Power.

        Here's a fragment of code to replace the AVX elements:

#+begin_src java :comments org :tangle PairHMM-update.java
	// VSX implementation of LOGLESS_CACHING through JNI. */
	VSX_LOGLESS_CACHING(args -> {
		final VSXLoglessPairHMM hmm = new VSXLoglessPairHMM();
		logger.info("Using the VSX native PairHMM implementation");
		return hmm;
	    }),
#+end_src

        The src_java{FASTEST_AVAILABLE} element will be replaced with this:

#+begin_src java :comments org :tangle PairHMM-update.java
        /* Uses the fastest available PairHMM implementation supported on the platform.
           Order of precedence:
            1. VSX_LOGLESS_CACHING
            2. LOGLESS_CACHING
         ,*/
        FASTEST_AVAILABLE(args -> {
            try {
		final VSXLoglessPairHMM hmm = new VSXLoglessPairHMM();
		logger.info("Using the VSX native PairHMM implementation");
		return hmm;
            }
            catch ( UserException.HardwareFeatureException e ) {
                logger.warn("***WARNING: Machine does not have the VSX instruction set support needed for the accelerated VSX PairHmm. " +
                            "Falling back to the MUCH slower LOGLESS_CACHING implementation!");
                return new LoglessPairHMM();
            }
        });
#+end_src

* Footnotes

[fn:3]Add error handling, or change to src_java{void} return.
[fn:2]I'm not sure whether this is necessary. 

[fn:1]This may work for Power 8 also. If so, I'll compile it to work
for Power 8 and above. 
